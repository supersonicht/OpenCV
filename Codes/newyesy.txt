#include "stdafx.h"
#include <iostream>



#include "opencv2/highgui/highgui.hpp"

#include "opencv2/imgproc/imgproc_c.h"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2\core\core.hpp"

#include "opencv\cvaux.h"
#include "stdlib.h"

using namespace cv;
using namespace std;



int main(int argc, char** argv)
{
	cvNamedWindow("img");
	cvNamedWindow("mod");
	cvNamedWindow("Controls",0);
	IplImage *frame,*dst,*dst2;
	IplImage *drawd;
	int start = 0;
	CvCapture *capture = cvCreateCameraCapture(0);
	assert(capture != NULL);
	int Hlo = 0, Hhi = 240, Slo = 0, Shi = 240, Vlo = 0, Vhi = 240;
	cvCreateTrackbar("H-low", "Controls", &Hlo, 255);
	cvCreateTrackbar("H-hi", "Controls", &Hhi, 255);
	cvCreateTrackbar("S-low", "Controls", &Slo, 255);
	cvCreateTrackbar("S-hi", "Controls", &Shi, 255);
	cvCreateTrackbar("V-low", "Controls", &Vlo, 255);
	cvCreateTrackbar("V-hi", "Controls", &Vhi, 255);
	cvCreateTrackbar("Start", "Controls", &start, 1);
	CvMemStorage *mem = cvCreateMemStorage();
	CvSeq *contourseq = 0;
	frame = cvQueryFrame(capture);
	dst = cvCreateImage(cvGetSize(frame), IPL_DEPTH_8U, 3);
	dst2 = cvCreateImage(cvGetSize(frame), IPL_DEPTH_8U, 1);
	IplImage *temp = cvCreateImage(cvGetSize(frame), IPL_DEPTH_8U, 1);
	IplImage *out = cvCreateImage(cvGetSize(frame), IPL_DEPTH_8U, 3);
	drawd=cvCreateImage(cvGetSize(frame), IPL_DEPTH_8U, 3);
	int posX = 0, posY = 0;
	int lastX = 0, lastY = 0;
	while (1)
	{
		
		frame = cvQueryFrame(capture); 
		cvFlip(frame, frame, 1);
		//cvSmooth(frame, frame, 2, 3);
		

		cvCvtColor(frame, dst, CV_RGB2HSV);
		cvInRangeS(dst, cvScalar(Hlo, Slo, Vlo), cvScalar(Hhi, Shi, Vhi), dst2);
		cvMorphologyEx(dst2, dst2, NULL, NULL, CV_MOP_OPEN);
		cvCopy(dst2, temp);
		cvZero(contourseq);
		cvFindContours(temp, mem, &contourseq,88,1,CV_RETR_LIST);
		if (contourseq)
		{
			double len, longestlen=0;
			int i = -1,longestpos=-1;
			//cvDrawContours(frame, contourseq, cvScalar(0, 255, 0), cvScalar(0, 255, 0), 1, 2);
			//CvContourScanner scanner;
			//cvStartFindContours()
			for (CvSeq* s = contourseq; s != NULL; s = s->h_next)
			{
				i++;
				len = cvContourPerimeter(s);
				if (len > longestlen)
				{
					longestlen = len;
					longestpos = i;
				}
			}
			i = -1;
			/*for (CvSeq* s = contourseq; s != NULL; s = s->h_next)
			{
				i++;
				if (i==longestpos&&i>=0)
					cvDrawContours(frame, s, cvScalar(0, 255, 0), cvScalar(0, 255, 0), 0, 2);
			}*/
			if (longestpos >= 0){
				CvSeq *s = contourseq + (longestpos*sizeof(CvSeq));

				cvDrawContours(frame, s, cvScalar(0, 255, 0), cvScalar(0, 255, 0), 0, 2);
			}

		}
		lastX = posX;
		lastY = posY;
		CvMoments *moments=(CvMoments *)malloc(sizeof(CvMoments));
		cvMoments(dst2, moments, 1);
		int m00 = cvGetCentralMoment(moments, 0, 0);
		int m10 = cvGetSpatialMoment(moments, 1, 0);
		int m01 = cvGetSpatialMoment(moments, 0, 1);
		if (m00 > 0)
		{
			posX = m10 / m00;
			posY = m01 / m00;
			printf("%d,%d\n", posX, posY);
		if (posX>0 && posY>0 && lastX>0 && lastY>0 && start==1)
		cvDrawLine(drawd, cvPoint(lastX, lastY), cvPoint(posX, posY), cvScalar(255, 0, 0), 3);
		}
		cvAdd(frame, drawd,out);
		cvShowImage("img", out);
		cvShowImage("mod", dst2);
		cvShowImage("Controls", NULL);
		char c=cvWaitKey(33);
		if (c == 27) break;
	}
	cvReleaseCapture(&capture);
	cvDestroyWindow("img");
	
	
	
	
	}